---
title: "Introduction to the workshop"
subtitle: "[UNIT LONG NAME]"
toc: true
order: 1
---

## Learning Objectives

In this session, you will learn basics of computational reproducibility, containerisation, and version control. We'll cover:

-   Workspace hygiene in RStudio
-   RProjects and absolute vs. relative paths
-   Basics of version control with git
-   Basics of collaborative working with git and GitHub

## Plan for the session

The session will be split into the following sections:

I.  Introduction to workspace management and RProjects
II. git and GitHub workflow examples
III. Breakout session with independent work

## I. Workspace mangement and RProjects

### Workspace Management

A fundamental principle of computational reproducibility is to start from a clean slate. This avoids that variables with identical names are (unintentionally) shared between analyses, and variables are saved and loaded only when you want to.

R and RStudio have the unpleasant habit to automatically save your workspace when closing, and load it when you start a new session. This leads to great confusion when you are working on multiple projects at once.

To turn this feature off, go to

**Tools \> Global Options \> General**

and in the "Basic" tab

-   Unceck "Restore .RData into workspace at startup"
-   Set "Save workspace to .RData on exit" to "Never"

Now RStudio will start with an empty workspace on startup.

If you have analyses that run longer and you don't want to re-run them every session, save the results (e.g., using `save` or `save.image` to an appropriately named folder) and load them as you need them using `load`.

### Absolute vs. Relative Paths

#### The Problem

A second fundamental principle of computational reproducibility is that your code should run without manual modification not only on your machine, but on any machine. Specifically, this means it should be independent of the folder/directory structure of your machine.

For example, the code

```{r, eval=FALSE, echo=TRUE}
read.csv("C:/path/to/important/raw/data/on/my/disk")
```

is guaranteed to run only on my own machine, but not on any others - neither the folders nor the data will exist there. Similarly, code like

```{r, echo=TRUE, eval=FALSE}
setwd("C:/path/to/some/directory/that/exists/only/on/my/machine")
```

will set the path to some directory, which will not exist on any other machine other than my own.

One solution for this is to prompt the user to set the working directory manually, e.g., with lines like

```{r, echo=TRUE, eval=FALSE}
# to run this script, go to
# Session -> Set Working Directory -> To Source File Location
```

However, this requires manual work from the user, which should be minimized at all cost.

#### The Solution: RProjects

A simple solution for these problems are **RProjects**. These are files used by RStudio automatically determine relative paths. When you work with RProjects

-   All paths are always relative to the location of your .RProject file
-   You can pass around the file with the .RProject file to other people or copy it to other machines without breaking the code

To create a RProject, go to

**File \> New Project**

and select your preferred option (New Directory, Existing Directory, or Version Control).

To start working in a project, go to

**File \> Open Project**

and select the .RProject file of the project you want to work on. After opening the file you will see the project name on the top left of your RStudio window.

You don't need to explicitly close the project before closing RStudio, RStudio takes care of that. To switch to another project, simply open the corresponding .RProject file.

You can also work on multiple projects in parallel. For this, go to

**File \> Open Project in New Session...**

## II. Git and GitHub workflow

## III. Breakout session
